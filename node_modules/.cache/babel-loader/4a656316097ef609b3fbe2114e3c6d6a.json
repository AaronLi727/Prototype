{"ast":null,"code":"import BaseInput from \"./baseInput\"; //import Checkbox from './checkbox'\n//import Radio from './radio'\n//import Switch from './switch'\n//import Text from './text'\n//import Textarea from './textarea'\n//import Select from './select'\n\nimport Util from \"./util\";\n\nconst File = ($ => {\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n  const NAME = \"file\";\n  const DATA_KEY = `bmd.${NAME}`;\n  const JQUERY_NAME = `bmd${NAME.charAt(0).toUpperCase() + NAME.slice(1)}`;\n  const JQUERY_NO_CONFLICT = $.fn[JQUERY_NAME];\n  const Default = {};\n  const ClassName = {\n    FILE: NAME,\n    IS_FILE: \"is-file\"\n  };\n  const Selector = {\n    FILENAMES: \"input.form-control[readonly]\"\n  };\n  /**\n   * ------------------------------------------------------------------------\n   * Class Definition\n   * ------------------------------------------------------------------------\n   */\n\n  class File extends BaseInput {\n    constructor($element, config) {\n      super($element, $.extend(true, //{invalidComponentMatches: [Checkbox, Radio, Text, Textarea, Select, Switch]},\n      Default, config));\n      this.$bmdFormGroup.addClass(ClassName.IS_FILE);\n    }\n\n    dispose() {\n      super.dispose(DATA_KEY);\n    }\n\n    static matches($element) {\n      if ($element.attr(\"type\") === \"file\") {\n        return true;\n      }\n\n      return false;\n    }\n\n    static rejectMatch(component, $element) {\n      Util.assert(this.$element, this.matches($element), `${component} component element ${Util.describe($element)} is invalid for type='file'.`);\n    } // ------------------------------------------------------------------------\n    // protected\n    // Demarcation element (e.g. first child of a form-group)\n\n\n    outerElement() {\n      // label.file > input[type=file]\n      return this.$element.parent().closest(`.${ClassName.FILE}`);\n    }\n\n    rejectWithoutRequiredStructure() {\n      // label.file > input[type=file]\n      Util.assert(this.$element, !this.outerElement().prop(\"tagName\") === \"label\", `${this.constructor.name}'s ${Util.describe(this.$element)} parent element ${Util.describe(this.outerElement())} should be <label>.`);\n      Util.assert(this.$element, !this.outerElement().hasClass(ClassName.FILE), `${this.constructor.name}'s ${Util.describe(this.$element)} parent element ${Util.describe(this.outerElement())} should have class .${ClassName.FILE}.`);\n    }\n\n    addFocusListener() {\n      this.$bmdFormGroup.on(\"focus\", () => {\n        this.addFormGroupFocus();\n      }).on(\"blur\", () => {\n        this.removeFormGroupFocus();\n      });\n    }\n\n    addChangeListener() {\n      // set the fileinput readonly field with the name of the file\n      this.$element.on(\"change\", () => {\n        let value = \"\";\n        $.each(this.$element.files, (i, file) => {\n          value += `${file.name}  , `;\n        });\n        value = value.substring(0, value.length - 2);\n\n        if (value) {\n          this.addIsFilled();\n        } else {\n          this.removeIsFilled();\n        }\n\n        this.$bmdFormGroup.find(Selector.FILENAMES).val(value);\n      });\n    } // ------------------------------------------------------------------------\n    // private\n    // ------------------------------------------------------------------------\n    // static\n\n\n    static _jQueryInterface(config) {\n      return this.each(function () {\n        let $element = $(this);\n        let data = $element.data(DATA_KEY);\n\n        if (!data) {\n          data = new File($element, config);\n          $element.data(DATA_KEY, data);\n        }\n      });\n    }\n\n  }\n  /**\n   * ------------------------------------------------------------------------\n   * jQuery\n   * ------------------------------------------------------------------------\n   */\n\n\n  $.fn[JQUERY_NAME] = File._jQueryInterface;\n  $.fn[JQUERY_NAME].Constructor = File;\n\n  $.fn[JQUERY_NAME].noConflict = () => {\n    $.fn[JQUERY_NAME] = JQUERY_NO_CONFLICT;\n    return File._jQueryInterface;\n  };\n\n  return File;\n})(jQuery);\n\nexport default File;","map":{"version":3,"sources":["/Users/aaron/Desktop/my-app/node_modules/bootstrap-material-design/js/file.js"],"names":["BaseInput","Util","File","$","NAME","DATA_KEY","JQUERY_NAME","charAt","toUpperCase","slice","JQUERY_NO_CONFLICT","fn","Default","ClassName","FILE","IS_FILE","Selector","FILENAMES","constructor","$element","config","extend","$bmdFormGroup","addClass","dispose","matches","attr","rejectMatch","component","assert","describe","outerElement","parent","closest","rejectWithoutRequiredStructure","prop","name","hasClass","addFocusListener","on","addFormGroupFocus","removeFormGroupFocus","addChangeListener","value","each","files","i","file","substring","length","addIsFilled","removeIsFilled","find","val","_jQueryInterface","data","Constructor","noConflict","jQuery"],"mappings":"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","sourcesContent":["import BaseInput from \"./baseInput\";\n//import Checkbox from './checkbox'\n//import Radio from './radio'\n//import Switch from './switch'\n//import Text from './text'\n//import Textarea from './textarea'\n//import Select from './select'\nimport Util from \"./util\";\n\nconst File = ($ => {\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n  const NAME = \"file\";\n  const DATA_KEY = `bmd.${NAME}`;\n  const JQUERY_NAME = `bmd${NAME.charAt(0).toUpperCase() + NAME.slice(1)}`;\n  const JQUERY_NO_CONFLICT = $.fn[JQUERY_NAME];\n\n  const Default = {};\n\n  const ClassName = {\n    FILE: NAME,\n    IS_FILE: \"is-file\"\n  };\n\n  const Selector = {\n    FILENAMES: \"input.form-control[readonly]\"\n  };\n\n  /**\n   * ------------------------------------------------------------------------\n   * Class Definition\n   * ------------------------------------------------------------------------\n   */\n  class File extends BaseInput {\n    constructor($element, config) {\n      super(\n        $element,\n        $.extend(\n          true,\n          //{invalidComponentMatches: [Checkbox, Radio, Text, Textarea, Select, Switch]},\n          Default,\n          config\n        )\n      );\n\n      this.$bmdFormGroup.addClass(ClassName.IS_FILE);\n    }\n\n    dispose() {\n      super.dispose(DATA_KEY);\n    }\n\n    static matches($element) {\n      if ($element.attr(\"type\") === \"file\") {\n        return true;\n      }\n      return false;\n    }\n\n    static rejectMatch(component, $element) {\n      Util.assert(\n        this.$element,\n        this.matches($element),\n        `${component} component element ${Util.describe(\n          $element\n        )} is invalid for type='file'.`\n      );\n    }\n\n    // ------------------------------------------------------------------------\n    // protected\n\n    // Demarcation element (e.g. first child of a form-group)\n    outerElement() {\n      // label.file > input[type=file]\n      return this.$element.parent().closest(`.${ClassName.FILE}`);\n    }\n\n    rejectWithoutRequiredStructure() {\n      // label.file > input[type=file]\n      Util.assert(\n        this.$element,\n        !this.outerElement().prop(\"tagName\") === \"label\",\n        `${this.constructor.name}'s ${Util.describe(\n          this.$element\n        )} parent element ${Util.describe(\n          this.outerElement()\n        )} should be <label>.`\n      );\n      Util.assert(\n        this.$element,\n        !this.outerElement().hasClass(ClassName.FILE),\n        `${this.constructor.name}'s ${Util.describe(\n          this.$element\n        )} parent element ${Util.describe(\n          this.outerElement()\n        )} should have class .${ClassName.FILE}.`\n      );\n    }\n\n    addFocusListener() {\n      this.$bmdFormGroup\n        .on(\"focus\", () => {\n          this.addFormGroupFocus();\n        })\n        .on(\"blur\", () => {\n          this.removeFormGroupFocus();\n        });\n    }\n\n    addChangeListener() {\n      // set the fileinput readonly field with the name of the file\n      this.$element.on(\"change\", () => {\n        let value = \"\";\n        $.each(this.$element.files, (i, file) => {\n          value += `${file.name}  , `;\n        });\n        value = value.substring(0, value.length - 2);\n        if (value) {\n          this.addIsFilled();\n        } else {\n          this.removeIsFilled();\n        }\n        this.$bmdFormGroup.find(Selector.FILENAMES).val(value);\n      });\n    }\n\n    // ------------------------------------------------------------------------\n    // private\n\n    // ------------------------------------------------------------------------\n    // static\n    static _jQueryInterface(config) {\n      return this.each(function() {\n        let $element = $(this);\n        let data = $element.data(DATA_KEY);\n\n        if (!data) {\n          data = new File($element, config);\n          $element.data(DATA_KEY, data);\n        }\n      });\n    }\n  }\n\n  /**\n   * ------------------------------------------------------------------------\n   * jQuery\n   * ------------------------------------------------------------------------\n   */\n  $.fn[JQUERY_NAME] = File._jQueryInterface;\n  $.fn[JQUERY_NAME].Constructor = File;\n  $.fn[JQUERY_NAME].noConflict = () => {\n    $.fn[JQUERY_NAME] = JQUERY_NO_CONFLICT;\n    return File._jQueryInterface;\n  };\n\n  return File;\n})(jQuery);\n\nexport default File;\n"]},"metadata":{},"sourceType":"module"}