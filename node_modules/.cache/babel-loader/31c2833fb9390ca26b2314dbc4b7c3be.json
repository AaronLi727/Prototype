{"ast":null,"code":"const Util = (() => {\n  /**\n   * ------------------------------------------------------------------------\n   * Private TransitionEnd Helpers\n   * ------------------------------------------------------------------------\n   */\n  let transitionEnd = false;\n  let transitionEndSelector = \"\";\n  const TransitionEndEvent = {\n    WebkitTransition: \"webkitTransitionEnd\",\n    MozTransition: \"transitionend\",\n    OTransition: \"oTransitionEnd otransitionend\",\n    transition: \"transitionend\"\n  };\n\n  function transitionEndTest() {\n    if (window.QUnit) {\n      return false;\n    }\n\n    let el = document.createElement(\"bmd\");\n\n    for (let name in TransitionEndEvent) {\n      if (el.style[name] !== undefined) {\n        return TransitionEndEvent[name]; // { end: TransitionEndEvent[name] }\n      }\n    }\n\n    return false;\n  }\n\n  function setTransitionEndSupport() {\n    transitionEnd = transitionEndTest(); // generate a concatenated transition end event selector\n\n    for (let name in TransitionEndEvent) {\n      transitionEndSelector += ` ${TransitionEndEvent[name]}`;\n    }\n  }\n  /**\n   * --------------------------------------------------------------------------\n   * Public Util Api\n   * --------------------------------------------------------------------------\n   */\n\n\n  let Util = {\n    transitionEndSupported() {\n      return transitionEnd;\n    },\n\n    transitionEndSelector() {\n      return transitionEndSelector;\n    },\n\n    isChar(event) {\n      if (typeof event.which === \"undefined\") {\n        return true;\n      } else if (typeof event.which === \"number\" && event.which > 0) {\n        return !event.ctrlKey && !event.metaKey && !event.altKey && event.which !== 8 && // backspace\n        event.which !== 9 && // tab\n        event.which !== 13 && // enter\n        event.which !== 16 && // shift\n        event.which !== 17 && // ctrl\n        event.which !== 20 && // caps lock\n        event.which !== 27 // escape\n        ;\n      }\n\n      return false;\n    },\n\n    assert($element, invalidTest, message) {\n      if (invalidTest) {\n        if (!$element === undefined) {\n          $element.css(\"border\", \"1px solid red\");\n        }\n\n        console.error(message, $element); // eslint-disable-line no-console\n\n        throw message;\n      }\n    },\n\n    describe($element) {\n      if ($element === undefined) {\n        return \"undefined\";\n      } else if ($element.length === 0) {\n        return \"(no matching elements)\";\n      }\n\n      return `${$element[0].outerHTML.split(\">\")[0]}>`;\n    }\n\n  };\n  setTransitionEndSupport();\n  return Util;\n})(jQuery);\n\nexport default Util;","map":{"version":3,"sources":["/Users/aaron/Desktop/my-app/node_modules/bootstrap-material-design/js/util.js"],"names":["Util","transitionEnd","transitionEndSelector","TransitionEndEvent","WebkitTransition","MozTransition","OTransition","transition","transitionEndTest","window","QUnit","el","document","createElement","name","style","undefined","setTransitionEndSupport","transitionEndSupported","isChar","event","which","ctrlKey","metaKey","altKey","assert","$element","invalidTest","message","css","console","error","describe","length","outerHTML","split","jQuery"],"mappings":"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","sourcesContent":["const Util = (() => {\n  /**\n   * ------------------------------------------------------------------------\n   * Private TransitionEnd Helpers\n   * ------------------------------------------------------------------------\n   */\n\n  let transitionEnd = false;\n  let transitionEndSelector = \"\";\n\n  const TransitionEndEvent = {\n    WebkitTransition: \"webkitTransitionEnd\",\n    MozTransition: \"transitionend\",\n    OTransition: \"oTransitionEnd otransitionend\",\n    transition: \"transitionend\"\n  };\n\n  function transitionEndTest() {\n    if (window.QUnit) {\n      return false;\n    }\n\n    let el = document.createElement(\"bmd\");\n\n    for (let name in TransitionEndEvent) {\n      if (el.style[name] !== undefined) {\n        return TransitionEndEvent[name]; // { end: TransitionEndEvent[name] }\n      }\n    }\n\n    return false;\n  }\n\n  function setTransitionEndSupport() {\n    transitionEnd = transitionEndTest();\n\n    // generate a concatenated transition end event selector\n    for (let name in TransitionEndEvent) {\n      transitionEndSelector += ` ${TransitionEndEvent[name]}`;\n    }\n  }\n\n  /**\n   * --------------------------------------------------------------------------\n   * Public Util Api\n   * --------------------------------------------------------------------------\n   */\n\n  let Util = {\n    transitionEndSupported() {\n      return transitionEnd;\n    },\n\n    transitionEndSelector() {\n      return transitionEndSelector;\n    },\n\n    isChar(event) {\n      if (typeof event.which === \"undefined\") {\n        return true;\n      } else if (typeof event.which === \"number\" && event.which > 0) {\n        return (\n          !event.ctrlKey &&\n          !event.metaKey &&\n          !event.altKey &&\n          event.which !== 8 && // backspace\n          event.which !== 9 && // tab\n          event.which !== 13 && // enter\n          event.which !== 16 && // shift\n          event.which !== 17 && // ctrl\n          event.which !== 20 && // caps lock\n          event.which !== 27 // escape\n        );\n      }\n      return false;\n    },\n\n    assert($element, invalidTest, message) {\n      if (invalidTest) {\n        if (!$element === undefined) {\n          $element.css(\"border\", \"1px solid red\");\n        }\n        console.error(message, $element); // eslint-disable-line no-console\n        throw message;\n      }\n    },\n\n    describe($element) {\n      if ($element === undefined) {\n        return \"undefined\";\n      } else if ($element.length === 0) {\n        return \"(no matching elements)\";\n      }\n      return `${$element[0].outerHTML.split(\">\")[0]}>`;\n    }\n  };\n\n  setTransitionEndSupport();\n  return Util;\n})(jQuery);\n\nexport default Util;\n"]},"metadata":{},"sourceType":"module"}