{"ast":null,"code":"import Radio from \"./radio\";\n\nconst RadioInline = ($ => {\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n  const NAME = \"radioInline\";\n  const DATA_KEY = `bmd.${NAME}`;\n  const JQUERY_NAME = `bmd${NAME.charAt(0).toUpperCase() + NAME.slice(1)}`;\n  const JQUERY_NO_CONFLICT = $.fn[JQUERY_NAME];\n  const Default = {\n    bmdFormGroup: {\n      create: false,\n      // no bmd-form-group creation if form-group not present. It messes with the layout.\n      required: false\n    }\n  };\n  /**\n   * ------------------------------------------------------------------------\n   * Class Definition\n   * ------------------------------------------------------------------------\n   */\n\n  class RadioInline extends Radio {\n    constructor($element, config, properties = {\n      inputType: \"radio\",\n      outerClass: \"radio-inline\"\n    }) {\n      super($element, $.extend(true, {}, Default, config), properties);\n    }\n\n    dispose() {\n      super.dispose(DATA_KEY);\n    } // ------------------------------------------------------------------------\n    // protected\n    // ------------------------------------------------------------------------\n    // protected\n    // ------------------------------------------------------------------------\n    // private\n    // ------------------------------------------------------------------------\n    // static\n\n\n    static _jQueryInterface(config) {\n      return this.each(function () {\n        let $element = $(this);\n        let data = $element.data(DATA_KEY);\n\n        if (!data) {\n          data = new RadioInline($element, config);\n          $element.data(DATA_KEY, data);\n        }\n      });\n    }\n\n  }\n  /**\n   * ------------------------------------------------------------------------\n   * jQuery\n   * ------------------------------------------------------------------------\n   */\n\n\n  $.fn[JQUERY_NAME] = RadioInline._jQueryInterface;\n  $.fn[JQUERY_NAME].Constructor = RadioInline;\n\n  $.fn[JQUERY_NAME].noConflict = () => {\n    $.fn[JQUERY_NAME] = JQUERY_NO_CONFLICT;\n    return RadioInline._jQueryInterface;\n  };\n\n  return RadioInline;\n})(jQuery);\n\nexport default RadioInline;","map":{"version":3,"sources":["/Users/aaron/Desktop/my-app/node_modules/bootstrap-material-design/js/radioInline.js"],"names":["Radio","RadioInline","$","NAME","DATA_KEY","JQUERY_NAME","charAt","toUpperCase","slice","JQUERY_NO_CONFLICT","fn","Default","bmdFormGroup","create","required","constructor","$element","config","properties","inputType","outerClass","extend","dispose","_jQueryInterface","each","data","Constructor","noConflict","jQuery"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,SAAlB;;AAEA,MAAMC,WAAW,GAAG,CAACC,CAAC,IAAI;AACxB;;;;;AAKA,QAAMC,IAAI,GAAG,aAAb;AACA,QAAMC,QAAQ,GAAI,OAAMD,IAAK,EAA7B;AACA,QAAME,WAAW,GAAI,MAAKF,IAAI,CAACG,MAAL,CAAY,CAAZ,EAAeC,WAAf,KAA+BJ,IAAI,CAACK,KAAL,CAAW,CAAX,CAAc,EAAvE;AACA,QAAMC,kBAAkB,GAAGP,CAAC,CAACQ,EAAF,CAAKL,WAAL,CAA3B;AAEA,QAAMM,OAAO,GAAG;AACdC,IAAAA,YAAY,EAAE;AACZC,MAAAA,MAAM,EAAE,KADI;AACG;AACfC,MAAAA,QAAQ,EAAE;AAFE;AADA,GAAhB;AAOA;;;;;;AAKA,QAAMb,WAAN,SAA0BD,KAA1B,CAAgC;AAC9Be,IAAAA,WAAW,CACTC,QADS,EAETC,MAFS,EAGTC,UAAU,GAAG;AAAEC,MAAAA,SAAS,EAAE,OAAb;AAAsBC,MAAAA,UAAU,EAAE;AAAlC,KAHJ,EAIT;AACA,YAAMJ,QAAN,EAAgBd,CAAC,CAACmB,MAAF,CAAS,IAAT,EAAe,EAAf,EAAmBV,OAAnB,EAA4BM,MAA5B,CAAhB,EAAqDC,UAArD;AACD;;AAEDI,IAAAA,OAAO,GAAG;AACR,YAAMA,OAAN,CAAclB,QAAd;AACD,KAX6B,CAa9B;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;;;AACA,WAAOmB,gBAAP,CAAwBN,MAAxB,EAAgC;AAC9B,aAAO,KAAKO,IAAL,CAAU,YAAW;AAC1B,YAAIR,QAAQ,GAAGd,CAAC,CAAC,IAAD,CAAhB;AACA,YAAIuB,IAAI,GAAGT,QAAQ,CAACS,IAAT,CAAcrB,QAAd,CAAX;;AAEA,YAAI,CAACqB,IAAL,EAAW;AACTA,UAAAA,IAAI,GAAG,IAAIxB,WAAJ,CAAgBe,QAAhB,EAA0BC,MAA1B,CAAP;AACAD,UAAAA,QAAQ,CAACS,IAAT,CAAcrB,QAAd,EAAwBqB,IAAxB;AACD;AACF,OARM,CAAP;AASD;;AAlC6B;AAqChC;;;;;;;AAKAvB,EAAAA,CAAC,CAACQ,EAAF,CAAKL,WAAL,IAAoBJ,WAAW,CAACsB,gBAAhC;AACArB,EAAAA,CAAC,CAACQ,EAAF,CAAKL,WAAL,EAAkBqB,WAAlB,GAAgCzB,WAAhC;;AACAC,EAAAA,CAAC,CAACQ,EAAF,CAAKL,WAAL,EAAkBsB,UAAlB,GAA+B,MAAM;AACnCzB,IAAAA,CAAC,CAACQ,EAAF,CAAKL,WAAL,IAAoBI,kBAApB;AACA,WAAOR,WAAW,CAACsB,gBAAnB;AACD,GAHD;;AAKA,SAAOtB,WAAP;AACD,CAzEmB,EAyEjB2B,MAzEiB,CAApB;;AA2EA,eAAe3B,WAAf","sourcesContent":["import Radio from \"./radio\";\n\nconst RadioInline = ($ => {\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n  const NAME = \"radioInline\";\n  const DATA_KEY = `bmd.${NAME}`;\n  const JQUERY_NAME = `bmd${NAME.charAt(0).toUpperCase() + NAME.slice(1)}`;\n  const JQUERY_NO_CONFLICT = $.fn[JQUERY_NAME];\n\n  const Default = {\n    bmdFormGroup: {\n      create: false, // no bmd-form-group creation if form-group not present. It messes with the layout.\n      required: false\n    }\n  };\n\n  /**\n   * ------------------------------------------------------------------------\n   * Class Definition\n   * ------------------------------------------------------------------------\n   */\n  class RadioInline extends Radio {\n    constructor(\n      $element,\n      config,\n      properties = { inputType: \"radio\", outerClass: \"radio-inline\" }\n    ) {\n      super($element, $.extend(true, {}, Default, config), properties);\n    }\n\n    dispose() {\n      super.dispose(DATA_KEY);\n    }\n\n    // ------------------------------------------------------------------------\n    // protected\n\n    // ------------------------------------------------------------------------\n    // protected\n\n    // ------------------------------------------------------------------------\n    // private\n\n    // ------------------------------------------------------------------------\n    // static\n    static _jQueryInterface(config) {\n      return this.each(function() {\n        let $element = $(this);\n        let data = $element.data(DATA_KEY);\n\n        if (!data) {\n          data = new RadioInline($element, config);\n          $element.data(DATA_KEY, data);\n        }\n      });\n    }\n  }\n\n  /**\n   * ------------------------------------------------------------------------\n   * jQuery\n   * ------------------------------------------------------------------------\n   */\n  $.fn[JQUERY_NAME] = RadioInline._jQueryInterface;\n  $.fn[JQUERY_NAME].Constructor = RadioInline;\n  $.fn[JQUERY_NAME].noConflict = () => {\n    $.fn[JQUERY_NAME] = JQUERY_NO_CONFLICT;\n    return RadioInline._jQueryInterface;\n  };\n\n  return RadioInline;\n})(jQuery);\n\nexport default RadioInline;\n"]},"metadata":{},"sourceType":"module"}