{"ast":null,"code":"import Base from \"./base\";\n\nconst Autofill = ($ => {\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n  const NAME = \"autofill\";\n  const DATA_KEY = `bmd.${NAME}`;\n  const JQUERY_NAME = `bmd${NAME.charAt(0).toUpperCase() + NAME.slice(1)}`;\n  const JQUERY_NO_CONFLICT = $.fn[JQUERY_NAME];\n  const Default = {};\n  /**\n   * ------------------------------------------------------------------------\n   * Class Definition\n   * ------------------------------------------------------------------------\n   */\n\n  class Autofill extends Base {\n    constructor($element, config) {\n      super($element, $.extend(true, {}, Default, config));\n\n      this._watchLoading();\n\n      this._attachEventHandlers();\n    }\n\n    dispose() {\n      super.dispose(DATA_KEY);\n    } // ------------------------------------------------------------------------\n    // private\n\n\n    _watchLoading() {\n      // After 10 seconds we are quite sure all the needed inputs are autofilled then we can stop checking them\n      setTimeout(() => {\n        clearInterval(this._onLoading);\n      }, 10000);\n    } // This part of code will detect autofill when the page is loading (username and password inputs for example)\n\n\n    _onLoading() {\n      setInterval(() => {\n        $(\"input[type!=checkbox]\").each((index, element) => {\n          let $element = $(element);\n\n          if ($element.val() && $element.val() !== $element.attr(\"value\")) {\n            $element.trigger(\"change\");\n          }\n        });\n      }, 100);\n    }\n\n    _attachEventHandlers() {\n      // Listen on inputs of the focused form\n      //  (because user can select from the autofill dropdown only when the input has focus)\n      let focused = null;\n      $(document).on(\"focus\", \"input\", event => {\n        let $inputs = $(event.currentTarget).closest(\"form\").find(\"input\").not(\"[type=file]\");\n        focused = setInterval(() => {\n          $inputs.each((index, element) => {\n            let $element = $(element);\n\n            if ($element.val() !== $element.attr(\"value\")) {\n              $element.trigger(\"change\");\n            }\n          });\n        }, 100);\n      }).on(\"blur\", \".form-group input\", () => {\n        clearInterval(focused);\n      });\n    } // ------------------------------------------------------------------------\n    // static\n\n\n    static _jQueryInterface(config) {\n      return this.each(function () {\n        let $element = $(this);\n        let data = $element.data(DATA_KEY);\n\n        if (!data) {\n          data = new Autofill($element, config);\n          $element.data(DATA_KEY, data);\n        }\n      });\n    }\n\n  }\n  /**\n   * ------------------------------------------------------------------------\n   * jQuery\n   * ------------------------------------------------------------------------\n   */\n\n\n  $.fn[JQUERY_NAME] = Autofill._jQueryInterface;\n  $.fn[JQUERY_NAME].Constructor = Autofill;\n\n  $.fn[JQUERY_NAME].noConflict = () => {\n    $.fn[JQUERY_NAME] = JQUERY_NO_CONFLICT;\n    return Autofill._jQueryInterface;\n  };\n\n  return Autofill;\n})(jQuery);\n\nexport default Autofill;","map":{"version":3,"sources":["/Users/aaron/Desktop/my-app/node_modules/bootstrap-material-design/js/autofill.js"],"names":["Base","Autofill","$","NAME","DATA_KEY","JQUERY_NAME","charAt","toUpperCase","slice","JQUERY_NO_CONFLICT","fn","Default","constructor","$element","config","extend","_watchLoading","_attachEventHandlers","dispose","setTimeout","clearInterval","_onLoading","setInterval","each","index","element","val","attr","trigger","focused","document","on","event","$inputs","currentTarget","closest","find","not","_jQueryInterface","data","Constructor","noConflict","jQuery"],"mappings":"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","sourcesContent":["import Base from \"./base\";\n\nconst Autofill = ($ => {\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n  const NAME = \"autofill\";\n  const DATA_KEY = `bmd.${NAME}`;\n  const JQUERY_NAME = `bmd${NAME.charAt(0).toUpperCase() + NAME.slice(1)}`;\n  const JQUERY_NO_CONFLICT = $.fn[JQUERY_NAME];\n\n  const Default = {};\n\n  /**\n   * ------------------------------------------------------------------------\n   * Class Definition\n   * ------------------------------------------------------------------------\n   */\n  class Autofill extends Base {\n    constructor($element, config) {\n      super($element, $.extend(true, {}, Default, config));\n\n      this._watchLoading();\n      this._attachEventHandlers();\n    }\n\n    dispose() {\n      super.dispose(DATA_KEY);\n    }\n\n    // ------------------------------------------------------------------------\n    // private\n\n    _watchLoading() {\n      // After 10 seconds we are quite sure all the needed inputs are autofilled then we can stop checking them\n      setTimeout(() => {\n        clearInterval(this._onLoading);\n      }, 10000);\n    }\n\n    // This part of code will detect autofill when the page is loading (username and password inputs for example)\n    _onLoading() {\n      setInterval(() => {\n        $(\"input[type!=checkbox]\").each((index, element) => {\n          let $element = $(element);\n          if ($element.val() && $element.val() !== $element.attr(\"value\")) {\n            $element.trigger(\"change\");\n          }\n        });\n      }, 100);\n    }\n\n    _attachEventHandlers() {\n      // Listen on inputs of the focused form\n      //  (because user can select from the autofill dropdown only when the input has focus)\n      let focused = null;\n      $(document)\n        .on(\"focus\", \"input\", event => {\n          let $inputs = $(event.currentTarget)\n            .closest(\"form\")\n            .find(\"input\")\n            .not(\"[type=file]\");\n          focused = setInterval(() => {\n            $inputs.each((index, element) => {\n              let $element = $(element);\n              if ($element.val() !== $element.attr(\"value\")) {\n                $element.trigger(\"change\");\n              }\n            });\n          }, 100);\n        })\n        .on(\"blur\", \".form-group input\", () => {\n          clearInterval(focused);\n        });\n    }\n\n    // ------------------------------------------------------------------------\n    // static\n    static _jQueryInterface(config) {\n      return this.each(function() {\n        let $element = $(this);\n        let data = $element.data(DATA_KEY);\n\n        if (!data) {\n          data = new Autofill($element, config);\n          $element.data(DATA_KEY, data);\n        }\n      });\n    }\n  }\n\n  /**\n   * ------------------------------------------------------------------------\n   * jQuery\n   * ------------------------------------------------------------------------\n   */\n  $.fn[JQUERY_NAME] = Autofill._jQueryInterface;\n  $.fn[JQUERY_NAME].Constructor = Autofill;\n  $.fn[JQUERY_NAME].noConflict = () => {\n    $.fn[JQUERY_NAME] = JQUERY_NO_CONFLICT;\n    return Autofill._jQueryInterface;\n  };\n\n  return Autofill;\n})(jQuery);\n\nexport default Autofill;\n"]},"metadata":{},"sourceType":"module"}