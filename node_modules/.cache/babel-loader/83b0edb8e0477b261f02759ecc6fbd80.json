{"ast":null,"code":"import BaseLayout from \"./baseLayout\";\n\nconst Drawer = ($ => {\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n  const NAME = \"drawer\";\n  const DATA_KEY = `bmd.${NAME}`;\n  const JQUERY_NAME = `bmd${NAME.charAt(0).toUpperCase() + NAME.slice(1)}`;\n  const JQUERY_NO_CONFLICT = $.fn[JQUERY_NAME];\n  const Keycodes = {\n    ESCAPE: 27 //ENTER: 13,\n    //SPACE: 32\n\n  };\n  const ClassName = {\n    IN: \"in\",\n    DRAWER_IN: `bmd-drawer-in`,\n    DRAWER_OUT: `bmd-drawer-out`,\n    DRAWER: \"bmd-layout-drawer\",\n    CONTAINER: \"bmd-layout-container\"\n  };\n  const Default = {\n    focusSelector: `a, button, input`\n  };\n  /**\n   * ------------------------------------------------------------------------\n   * Class Definition\n   * ------------------------------------------------------------------------\n   */\n\n  class Drawer extends BaseLayout {\n    // $element is expected to be the trigger\n    //  i.e. <button class=\"btn bmd-btn-icon\" for=\"search\" data-toggle=\"drawer\" data-target=\"#my-side-nav-drawer\" aria-expanded=\"false\" aria-controls=\"my-side-nav-drawer\">\n    constructor($element, config) {\n      super($element, $.extend(true, {}, Default, config));\n      this.$toggles = $(`[data-toggle=\"drawer\"][href=\"#${this.$element[0].id}\"], [data-toggle=\"drawer\"][data-target=\"#${this.$element[0].id}\"]`);\n\n      this._addAria(); // click or escape on the backdrop closes the drawer\n\n\n      this.$backdrop.keydown(ev => {\n        if (ev.which === Keycodes.ESCAPE) {\n          this.hide();\n        }\n      }).click(() => {\n        this.hide();\n      }); // escape on the drawer closes it\n\n      this.$element.keydown(ev => {\n        if (ev.which === Keycodes.ESCAPE) {\n          this.hide();\n        }\n      }); // any toggle button clicks\n\n      this.$toggles.click(() => {\n        this.toggle();\n      });\n    }\n\n    dispose() {\n      super.dispose(DATA_KEY);\n      this.$toggles = null;\n    }\n\n    toggle() {\n      if (this._isOpen()) {\n        this.hide();\n      } else {\n        this.show();\n      }\n    }\n\n    show() {\n      if (this._isForcedClosed() || this._isOpen()) {\n        return;\n      }\n\n      this.$toggles.attr(\"aria-expanded\", true);\n      this.$element.attr(\"aria-expanded\", true);\n      this.$element.attr(\"aria-hidden\", false); // focus on the first focusable item\n\n      let $focusOn = this.$element.find(this.config.focusSelector);\n\n      if ($focusOn.length > 0) {\n        $focusOn.first().focus();\n      }\n\n      this.$container.addClass(ClassName.DRAWER_IN); // backdrop is responsively styled based on bmd-drawer-overlay, therefore style is none of our concern, simply add the marker class and let the scss determine if it should be displayed or not.\n\n      this.$backdrop.addClass(ClassName.IN);\n    }\n\n    hide() {\n      if (!this._isOpen()) {\n        return;\n      }\n\n      this.$toggles.attr(\"aria-expanded\", false);\n      this.$element.attr(\"aria-expanded\", false);\n      this.$element.attr(\"aria-hidden\", true);\n      this.$container.removeClass(ClassName.DRAWER_IN);\n      this.$backdrop.removeClass(ClassName.IN);\n    } // ------------------------------------------------------------------------\n    // private\n\n\n    _isOpen() {\n      return this.$container.hasClass(ClassName.DRAWER_IN);\n    }\n\n    _isForcedClosed() {\n      return this.$container.hasClass(ClassName.DRAWER_OUT);\n    }\n\n    _addAria() {\n      let isOpen = this._isOpen();\n\n      this.$element.attr(\"aria-expanded\", isOpen);\n      this.$element.attr(\"aria-hidden\", isOpen);\n\n      if (this.$toggles.length) {\n        this.$toggles.attr(\"aria-expanded\", isOpen);\n      }\n    } // ------------------------------------------------------------------------\n    // static\n\n\n    static _jQueryInterface(config) {\n      return this.each(function () {\n        let $element = $(this);\n        let data = $element.data(DATA_KEY);\n\n        if (!data) {\n          data = new Drawer($element, config);\n          $element.data(DATA_KEY, data);\n        }\n      });\n    }\n\n  }\n  /**\n   * ------------------------------------------------------------------------\n   * jQuery\n   * ------------------------------------------------------------------------\n   */\n\n\n  $.fn[JQUERY_NAME] = Drawer._jQueryInterface;\n  $.fn[JQUERY_NAME].Constructor = Drawer;\n\n  $.fn[JQUERY_NAME].noConflict = () => {\n    $.fn[JQUERY_NAME] = JQUERY_NO_CONFLICT;\n    return Drawer._jQueryInterface;\n  };\n\n  return Drawer;\n})(jQuery);\n\nexport default Drawer;","map":{"version":3,"sources":["/Users/aaron/Desktop/my-app/node_modules/bootstrap-material-design/js/drawer.js"],"names":["BaseLayout","Drawer","$","NAME","DATA_KEY","JQUERY_NAME","charAt","toUpperCase","slice","JQUERY_NO_CONFLICT","fn","Keycodes","ESCAPE","ClassName","IN","DRAWER_IN","DRAWER_OUT","DRAWER","CONTAINER","Default","focusSelector","constructor","$element","config","extend","$toggles","id","_addAria","$backdrop","keydown","ev","which","hide","click","toggle","dispose","_isOpen","show","_isForcedClosed","attr","$focusOn","find","length","first","focus","$container","addClass","removeClass","hasClass","isOpen","_jQueryInterface","each","data","Constructor","noConflict","jQuery"],"mappings":"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","sourcesContent":["import BaseLayout from \"./baseLayout\";\n\nconst Drawer = ($ => {\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n  const NAME = \"drawer\";\n  const DATA_KEY = `bmd.${NAME}`;\n  const JQUERY_NAME = `bmd${NAME.charAt(0).toUpperCase() + NAME.slice(1)}`;\n  const JQUERY_NO_CONFLICT = $.fn[JQUERY_NAME];\n\n  const Keycodes = {\n    ESCAPE: 27\n    //ENTER: 13,\n    //SPACE: 32\n  };\n\n  const ClassName = {\n    IN: \"in\",\n    DRAWER_IN: `bmd-drawer-in`,\n    DRAWER_OUT: `bmd-drawer-out`,\n    DRAWER: \"bmd-layout-drawer\",\n    CONTAINER: \"bmd-layout-container\"\n  };\n\n  const Default = {\n    focusSelector: `a, button, input`\n  };\n\n  /**\n   * ------------------------------------------------------------------------\n   * Class Definition\n   * ------------------------------------------------------------------------\n   */\n  class Drawer extends BaseLayout {\n    // $element is expected to be the trigger\n    //  i.e. <button class=\"btn bmd-btn-icon\" for=\"search\" data-toggle=\"drawer\" data-target=\"#my-side-nav-drawer\" aria-expanded=\"false\" aria-controls=\"my-side-nav-drawer\">\n    constructor($element, config) {\n      super($element, $.extend(true, {}, Default, config));\n\n      this.$toggles = $(\n        `[data-toggle=\"drawer\"][href=\"#${this.$element[0]\n          .id}\"], [data-toggle=\"drawer\"][data-target=\"#${this.$element[0].id}\"]`\n      );\n\n      this._addAria();\n\n      // click or escape on the backdrop closes the drawer\n      this.$backdrop\n        .keydown(ev => {\n          if (ev.which === Keycodes.ESCAPE) {\n            this.hide();\n          }\n        })\n        .click(() => {\n          this.hide();\n        });\n\n      // escape on the drawer closes it\n      this.$element.keydown(ev => {\n        if (ev.which === Keycodes.ESCAPE) {\n          this.hide();\n        }\n      });\n\n      // any toggle button clicks\n      this.$toggles.click(() => {\n        this.toggle();\n      });\n    }\n\n    dispose() {\n      super.dispose(DATA_KEY);\n      this.$toggles = null;\n    }\n\n    toggle() {\n      if (this._isOpen()) {\n        this.hide();\n      } else {\n        this.show();\n      }\n    }\n\n    show() {\n      if (this._isForcedClosed() || this._isOpen()) {\n        return;\n      }\n\n      this.$toggles.attr(\"aria-expanded\", true);\n      this.$element.attr(\"aria-expanded\", true);\n      this.$element.attr(\"aria-hidden\", false);\n\n      // focus on the first focusable item\n      let $focusOn = this.$element.find(this.config.focusSelector);\n      if ($focusOn.length > 0) {\n        $focusOn.first().focus();\n      }\n\n      this.$container.addClass(ClassName.DRAWER_IN);\n      // backdrop is responsively styled based on bmd-drawer-overlay, therefore style is none of our concern, simply add the marker class and let the scss determine if it should be displayed or not.\n      this.$backdrop.addClass(ClassName.IN);\n    }\n\n    hide() {\n      if (!this._isOpen()) {\n        return;\n      }\n\n      this.$toggles.attr(\"aria-expanded\", false);\n      this.$element.attr(\"aria-expanded\", false);\n      this.$element.attr(\"aria-hidden\", true);\n\n      this.$container.removeClass(ClassName.DRAWER_IN);\n      this.$backdrop.removeClass(ClassName.IN);\n    }\n\n    // ------------------------------------------------------------------------\n    // private\n\n    _isOpen() {\n      return this.$container.hasClass(ClassName.DRAWER_IN);\n    }\n\n    _isForcedClosed() {\n      return this.$container.hasClass(ClassName.DRAWER_OUT);\n    }\n\n    _addAria() {\n      let isOpen = this._isOpen();\n      this.$element.attr(\"aria-expanded\", isOpen);\n      this.$element.attr(\"aria-hidden\", isOpen);\n\n      if (this.$toggles.length) {\n        this.$toggles.attr(\"aria-expanded\", isOpen);\n      }\n    }\n\n    // ------------------------------------------------------------------------\n    // static\n    static _jQueryInterface(config) {\n      return this.each(function() {\n        let $element = $(this);\n        let data = $element.data(DATA_KEY);\n\n        if (!data) {\n          data = new Drawer($element, config);\n          $element.data(DATA_KEY, data);\n        }\n      });\n    }\n  }\n\n  /**\n   * ------------------------------------------------------------------------\n   * jQuery\n   * ------------------------------------------------------------------------\n   */\n  $.fn[JQUERY_NAME] = Drawer._jQueryInterface;\n  $.fn[JQUERY_NAME].Constructor = Drawer;\n  $.fn[JQUERY_NAME].noConflict = () => {\n    $.fn[JQUERY_NAME] = JQUERY_NO_CONFLICT;\n    return Drawer._jQueryInterface;\n  };\n\n  return Drawer;\n})(jQuery);\n\nexport default Drawer;\n"]},"metadata":{},"sourceType":"module"}