{"ast":null,"code":"import Base from \"./base\";\nimport Util from \"./util\";\n\nconst CollapseInline = ($ => {\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n  const NAME = \"collapseInline\";\n  const DATA_KEY = `bmd.${NAME}`;\n  const JQUERY_NAME = `bmd${NAME.charAt(0).toUpperCase() + NAME.slice(1)}`;\n  const JQUERY_NO_CONFLICT = $.fn[JQUERY_NAME];\n  const Selector = {\n    ANY_INPUT: \"input, select, textarea\"\n  };\n  const ClassName = {\n    IN: \"in\",\n    COLLAPSE: \"collapse\",\n    COLLAPSING: \"collapsing\",\n    COLLAPSED: \"collapsed\",\n    WIDTH: \"width\"\n  };\n  const Default = {};\n  /**\n   * ------------------------------------------------------------------------\n   * Class Definition\n   * ------------------------------------------------------------------------\n   */\n\n  class CollapseInline extends Base {\n    // $element is expected to be the trigger\n    //  i.e. <button class=\"btn bmd-btn-icon\" for=\"search\" data-toggle=\"collapse\" data-target=\"#search-field\" aria-expanded=\"false\" aria-controls=\"search-field\">\n    constructor($element, config) {\n      super($element, $.extend(true, {}, Default, config));\n      this.$bmdFormGroup = this.findMdbFormGroup(true);\n      let collapseSelector = $element.data(\"target\");\n      this.$collapse = $(collapseSelector);\n      Util.assert($element, this.$collapse.length === 0, `Cannot find collapse target for ${Util.describe($element)}`);\n      Util.assert(this.$collapse, !this.$collapse.hasClass(ClassName.COLLAPSE), `${Util.describe(this.$collapse)} is expected to have the '${ClassName.COLLAPSE}' class.  It is being targeted by ${Util.describe($element)}`); // find the first input for focusing\n\n      let $inputs = this.$bmdFormGroup.find(Selector.ANY_INPUT);\n\n      if ($inputs.length > 0) {\n        this.$input = $inputs.first();\n      } // automatically add the marker class to collapse width instead of height - nice convenience because it is easily forgotten\n\n\n      if (!this.$collapse.hasClass(ClassName.WIDTH)) {\n        this.$collapse.addClass(ClassName.WIDTH);\n      }\n\n      if (this.$input) {\n        // add a listener to set focus\n        this.$collapse.on(\"shown.bs.collapse\", () => {\n          this.$input.focus();\n        }); // add a listener to collapse field\n\n        this.$input.blur(() => {\n          this.$collapse.collapse(\"hide\");\n        });\n      }\n    }\n\n    dispose() {\n      super.dispose(DATA_KEY);\n      this.$bmdFormGroup = null;\n      this.$collapse = null;\n      this.$input = null;\n    } // ------------------------------------------------------------------------\n    // private\n    // ------------------------------------------------------------------------\n    // static\n\n\n    static _jQueryInterface(config) {\n      return this.each(function () {\n        let $element = $(this);\n        let data = $element.data(DATA_KEY);\n\n        if (!data) {\n          data = new CollapseInline($element, config);\n          $element.data(DATA_KEY, data);\n        }\n      });\n    }\n\n  }\n  /**\n   * ------------------------------------------------------------------------\n   * jQuery\n   * ------------------------------------------------------------------------\n   */\n\n\n  $.fn[JQUERY_NAME] = CollapseInline._jQueryInterface;\n  $.fn[JQUERY_NAME].Constructor = CollapseInline;\n\n  $.fn[JQUERY_NAME].noConflict = () => {\n    $.fn[JQUERY_NAME] = JQUERY_NO_CONFLICT;\n    return CollapseInline._jQueryInterface;\n  };\n\n  return CollapseInline;\n})(jQuery);\n\nexport default CollapseInline;","map":{"version":3,"sources":["/Users/aaron/Desktop/my-app/node_modules/bootstrap-material-design/js/collapseInline.js"],"names":["Base","Util","CollapseInline","$","NAME","DATA_KEY","JQUERY_NAME","charAt","toUpperCase","slice","JQUERY_NO_CONFLICT","fn","Selector","ANY_INPUT","ClassName","IN","COLLAPSE","COLLAPSING","COLLAPSED","WIDTH","Default","constructor","$element","config","extend","$bmdFormGroup","findMdbFormGroup","collapseSelector","data","$collapse","assert","length","describe","hasClass","$inputs","find","$input","first","addClass","on","focus","blur","collapse","dispose","_jQueryInterface","each","Constructor","noConflict","jQuery"],"mappings":"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","sourcesContent":["import Base from \"./base\";\nimport Util from \"./util\";\n\nconst CollapseInline = ($ => {\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n  const NAME = \"collapseInline\";\n  const DATA_KEY = `bmd.${NAME}`;\n  const JQUERY_NAME = `bmd${NAME.charAt(0).toUpperCase() + NAME.slice(1)}`;\n  const JQUERY_NO_CONFLICT = $.fn[JQUERY_NAME];\n\n  const Selector = {\n    ANY_INPUT: \"input, select, textarea\"\n  };\n\n  const ClassName = {\n    IN: \"in\",\n    COLLAPSE: \"collapse\",\n    COLLAPSING: \"collapsing\",\n    COLLAPSED: \"collapsed\",\n    WIDTH: \"width\"\n  };\n  const Default = {};\n\n  /**\n   * ------------------------------------------------------------------------\n   * Class Definition\n   * ------------------------------------------------------------------------\n   */\n  class CollapseInline extends Base {\n    // $element is expected to be the trigger\n    //  i.e. <button class=\"btn bmd-btn-icon\" for=\"search\" data-toggle=\"collapse\" data-target=\"#search-field\" aria-expanded=\"false\" aria-controls=\"search-field\">\n    constructor($element, config) {\n      super($element, $.extend(true, {}, Default, config));\n      this.$bmdFormGroup = this.findMdbFormGroup(true);\n\n      let collapseSelector = $element.data(\"target\");\n      this.$collapse = $(collapseSelector);\n\n      Util.assert(\n        $element,\n        this.$collapse.length === 0,\n        `Cannot find collapse target for ${Util.describe($element)}`\n      );\n      Util.assert(\n        this.$collapse,\n        !this.$collapse.hasClass(ClassName.COLLAPSE),\n        `${Util.describe(\n          this.$collapse\n        )} is expected to have the '${ClassName.COLLAPSE}' class.  It is being targeted by ${Util.describe(\n          $element\n        )}`\n      );\n\n      // find the first input for focusing\n      let $inputs = this.$bmdFormGroup.find(Selector.ANY_INPUT);\n      if ($inputs.length > 0) {\n        this.$input = $inputs.first();\n      }\n\n      // automatically add the marker class to collapse width instead of height - nice convenience because it is easily forgotten\n      if (!this.$collapse.hasClass(ClassName.WIDTH)) {\n        this.$collapse.addClass(ClassName.WIDTH);\n      }\n\n      if (this.$input) {\n        // add a listener to set focus\n        this.$collapse.on(\"shown.bs.collapse\", () => {\n          this.$input.focus();\n        });\n\n        // add a listener to collapse field\n        this.$input.blur(() => {\n          this.$collapse.collapse(\"hide\");\n        });\n      }\n    }\n\n    dispose() {\n      super.dispose(DATA_KEY);\n      this.$bmdFormGroup = null;\n      this.$collapse = null;\n      this.$input = null;\n    }\n\n    // ------------------------------------------------------------------------\n    // private\n\n    // ------------------------------------------------------------------------\n    // static\n    static _jQueryInterface(config) {\n      return this.each(function() {\n        let $element = $(this);\n        let data = $element.data(DATA_KEY);\n\n        if (!data) {\n          data = new CollapseInline($element, config);\n          $element.data(DATA_KEY, data);\n        }\n      });\n    }\n  }\n\n  /**\n   * ------------------------------------------------------------------------\n   * jQuery\n   * ------------------------------------------------------------------------\n   */\n  $.fn[JQUERY_NAME] = CollapseInline._jQueryInterface;\n  $.fn[JQUERY_NAME].Constructor = CollapseInline;\n  $.fn[JQUERY_NAME].noConflict = () => {\n    $.fn[JQUERY_NAME] = JQUERY_NO_CONFLICT;\n    return CollapseInline._jQueryInterface;\n  };\n\n  return CollapseInline;\n})(jQuery);\n\nexport default CollapseInline;\n"]},"metadata":{},"sourceType":"module"}