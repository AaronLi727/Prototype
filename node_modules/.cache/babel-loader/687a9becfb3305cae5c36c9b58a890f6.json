{"ast":null,"code":"import Base from \"./base\";\nimport Util from \"./util\";\n\nconst BaseLayout = ($ => {\n  const ClassName = {\n    CANVAS: \"bmd-layout-canvas\",\n    CONTAINER: \"bmd-layout-container\",\n    BACKDROP: `bmd-layout-backdrop`\n  };\n  const Selector = {\n    CANVAS: `.${ClassName.CANVAS}`,\n    CONTAINER: `.${ClassName.CONTAINER}`,\n    BACKDROP: `.${ClassName.BACKDROP}`\n  };\n  const Default = {\n    canvas: {\n      create: true,\n      required: true,\n      template: `<div class=\"${ClassName.CANVAS}\"></div>`\n    },\n    backdrop: {\n      create: true,\n      required: true,\n      template: `<div class=\"${ClassName.BACKDROP}\"></div>`\n    }\n  };\n  /**\n   * ------------------------------------------------------------------------\n   * Class Definition\n   * ------------------------------------------------------------------------\n   */\n\n  class BaseLayout extends Base {\n    constructor($element, config, properties = {}) {\n      super($element, $.extend(true, {}, Default, config), properties);\n      this.$container = this.findContainer(true);\n      this.$backdrop = this.resolveBackdrop();\n      this.resolveCanvas();\n    }\n\n    dispose(dataKey) {\n      super.dispose(dataKey);\n      this.$container = null;\n      this.$backdrop = null;\n    } // ------------------------------------------------------------------------\n    // protected\n    // Will wrap container in bmd-layout-canvas if necessary\n\n\n    resolveCanvas() {\n      let bd = this.findCanvas(false);\n\n      if (bd === undefined || bd.length === 0) {\n        if (this.config.canvas.create) {\n          this.$container.wrap(this.config.canvas.template);\n        }\n\n        bd = this.findCanvas(this.config.canvas.required);\n      }\n\n      return bd;\n    } // Find closest bmd-layout-container based on the given context\n\n\n    findCanvas(raiseError = true, context = this.$container) {\n      let canvas = context.closest(Selector.CANVAS);\n\n      if (canvas.length === 0 && raiseError) {\n        $.error(`Failed to find ${Selector.CANVAS} for ${Util.describe(context)}`);\n      }\n\n      return canvas;\n    } // Will add bmd-layout-backdrop to bmd-layout-container if necessary\n\n\n    resolveBackdrop() {\n      let bd = this.findBackdrop(false);\n\n      if (bd === undefined || bd.length === 0) {\n        if (this.config.backdrop.create) {\n          this.$container.append(this.config.backdrop.template);\n        }\n\n        bd = this.findBackdrop(this.config.backdrop.required);\n      }\n\n      return bd;\n    } // Find closest bmd-layout-container based on the given context\n\n\n    findBackdrop(raiseError = true, context = this.$container) {\n      let backdrop = context.find(`> ${Selector.BACKDROP}`);\n\n      if (backdrop.length === 0 && raiseError) {\n        $.error(`Failed to find ${Selector.BACKDROP} for ${Util.describe(context)}`);\n      }\n\n      return backdrop;\n    } // Find closest bmd-layout-container based on the given context\n\n\n    findContainer(raiseError = true, context = this.$element) {\n      let container = context.closest(Selector.CONTAINER);\n\n      if (container.length === 0 && raiseError) {\n        $.error(`Failed to find ${Selector.CONTAINER} for ${Util.describe(context)}`);\n      }\n\n      return container;\n    } // ------------------------------------------------------------------------\n    // private\n    // ------------------------------------------------------------------------\n    // static\n\n\n  }\n\n  return BaseLayout;\n})(jQuery);\n\nexport default BaseLayout;","map":{"version":3,"sources":["/Users/aaron/Desktop/my-app/node_modules/bootstrap-material-design/js/baseLayout.js"],"names":["Base","Util","BaseLayout","$","ClassName","CANVAS","CONTAINER","BACKDROP","Selector","Default","canvas","create","required","template","backdrop","constructor","$element","config","properties","extend","$container","findContainer","$backdrop","resolveBackdrop","resolveCanvas","dispose","dataKey","bd","findCanvas","undefined","length","wrap","raiseError","context","closest","error","describe","findBackdrop","append","find","container","jQuery"],"mappings":"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","sourcesContent":["import Base from \"./base\";\nimport Util from \"./util\";\n\nconst BaseLayout = ($ => {\n  const ClassName = {\n    CANVAS: \"bmd-layout-canvas\",\n    CONTAINER: \"bmd-layout-container\",\n    BACKDROP: `bmd-layout-backdrop`\n  };\n\n  const Selector = {\n    CANVAS: `.${ClassName.CANVAS}`,\n    CONTAINER: `.${ClassName.CONTAINER}`,\n    BACKDROP: `.${ClassName.BACKDROP}`\n  };\n\n  const Default = {\n    canvas: {\n      create: true,\n      required: true,\n      template: `<div class=\"${ClassName.CANVAS}\"></div>`\n    },\n    backdrop: {\n      create: true,\n      required: true,\n      template: `<div class=\"${ClassName.BACKDROP}\"></div>`\n    }\n  };\n\n  /**\n   * ------------------------------------------------------------------------\n   * Class Definition\n   * ------------------------------------------------------------------------\n   */\n  class BaseLayout extends Base {\n    constructor($element, config, properties = {}) {\n      super($element, $.extend(true, {}, Default, config), properties);\n\n      this.$container = this.findContainer(true);\n      this.$backdrop = this.resolveBackdrop();\n      this.resolveCanvas();\n    }\n\n    dispose(dataKey) {\n      super.dispose(dataKey);\n      this.$container = null;\n      this.$backdrop = null;\n    }\n\n    // ------------------------------------------------------------------------\n    // protected\n\n    // Will wrap container in bmd-layout-canvas if necessary\n    resolveCanvas() {\n      let bd = this.findCanvas(false);\n      if (bd === undefined || bd.length === 0) {\n        if (this.config.canvas.create) {\n          this.$container.wrap(this.config.canvas.template);\n        }\n\n        bd = this.findCanvas(this.config.canvas.required);\n      }\n\n      return bd;\n    }\n\n    // Find closest bmd-layout-container based on the given context\n    findCanvas(raiseError = true, context = this.$container) {\n      let canvas = context.closest(Selector.CANVAS);\n      if (canvas.length === 0 && raiseError) {\n        $.error(\n          `Failed to find ${Selector.CANVAS} for ${Util.describe(context)}`\n        );\n      }\n      return canvas;\n    }\n\n    // Will add bmd-layout-backdrop to bmd-layout-container if necessary\n    resolveBackdrop() {\n      let bd = this.findBackdrop(false);\n      if (bd === undefined || bd.length === 0) {\n        if (this.config.backdrop.create) {\n          this.$container.append(this.config.backdrop.template);\n        }\n\n        bd = this.findBackdrop(this.config.backdrop.required);\n      }\n\n      return bd;\n    }\n\n    // Find closest bmd-layout-container based on the given context\n    findBackdrop(raiseError = true, context = this.$container) {\n      let backdrop = context.find(`> ${Selector.BACKDROP}`);\n      if (backdrop.length === 0 && raiseError) {\n        $.error(\n          `Failed to find ${Selector.BACKDROP} for ${Util.describe(context)}`\n        );\n      }\n      return backdrop;\n    }\n\n    // Find closest bmd-layout-container based on the given context\n    findContainer(raiseError = true, context = this.$element) {\n      let container = context.closest(Selector.CONTAINER);\n      if (container.length === 0 && raiseError) {\n        $.error(\n          `Failed to find ${Selector.CONTAINER} for ${Util.describe(context)}`\n        );\n      }\n      return container;\n    }\n\n    // ------------------------------------------------------------------------\n    // private\n\n    // ------------------------------------------------------------------------\n    // static\n  }\n\n  return BaseLayout;\n})(jQuery);\n\nexport default BaseLayout;\n"]},"metadata":{},"sourceType":"module"}