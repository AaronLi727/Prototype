{"ast":null,"code":"import BaseFormControl from \"./baseFormControl\"; //import Checkbox from './checkbox'\n//import File from './file'\n//import Radio from './radio'\n//import Switch from './switch'\n//import Textarea from './textarea'\n//import Select from './select'\n\nimport Util from \"./util\";\n\nconst Text = ($ => {\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n  const NAME = \"text\";\n  const DATA_KEY = `bmd.${NAME}`;\n  const JQUERY_NAME = `bmd${NAME.charAt(0).toUpperCase() + NAME.slice(1)}`;\n  const JQUERY_NO_CONFLICT = $.fn[JQUERY_NAME];\n  const Default = {};\n  /**\n   * ------------------------------------------------------------------------\n   * Class Definition\n   * ------------------------------------------------------------------------\n   */\n\n  class Text extends BaseFormControl {\n    constructor($element, config) {\n      super($element, $.extend(true, //{invalidComponentMatches: [Checkbox, File, Radio, Switch, Select, Textarea]},\n      Default, config));\n    }\n\n    dispose(dataKey = DATA_KEY) {\n      super.dispose(dataKey);\n    }\n\n    static matches($element) {\n      if ($element.attr(\"type\") === \"text\") {\n        return true;\n      }\n\n      return false;\n    }\n\n    static rejectMatch(component, $element) {\n      Util.assert(this.$element, this.matches($element), `${component} component element ${Util.describe($element)} is invalid for type='text'.`);\n    } // ------------------------------------------------------------------------\n    // protected\n    // ------------------------------------------------------------------------\n    // private\n    // ------------------------------------------------------------------------\n    // static\n\n\n    static _jQueryInterface(config) {\n      return this.each(function () {\n        let $element = $(this);\n        let data = $element.data(DATA_KEY);\n\n        if (!data) {\n          data = new Text($element, config);\n          $element.data(DATA_KEY, data);\n        }\n      });\n    }\n\n  }\n  /**\n   * ------------------------------------------------------------------------\n   * jQuery\n   * ------------------------------------------------------------------------\n   */\n\n\n  $.fn[JQUERY_NAME] = Text._jQueryInterface;\n  $.fn[JQUERY_NAME].Constructor = Text;\n\n  $.fn[JQUERY_NAME].noConflict = () => {\n    $.fn[JQUERY_NAME] = JQUERY_NO_CONFLICT;\n    return Text._jQueryInterface;\n  };\n\n  return Text;\n})(jQuery);\n\nexport default Text;","map":{"version":3,"sources":["/Users/aaron/Desktop/my-app/node_modules/bootstrap-material-design/js/text.js"],"names":["BaseFormControl","Util","Text","$","NAME","DATA_KEY","JQUERY_NAME","charAt","toUpperCase","slice","JQUERY_NO_CONFLICT","fn","Default","constructor","$element","config","extend","dispose","dataKey","matches","attr","rejectMatch","component","assert","describe","_jQueryInterface","each","data","Constructor","noConflict","jQuery"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,mBAA5B,C,CACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAOC,IAAP,MAAiB,QAAjB;;AAEA,MAAMC,IAAI,GAAG,CAACC,CAAC,IAAI;AACjB;;;;;AAKA,QAAMC,IAAI,GAAG,MAAb;AACA,QAAMC,QAAQ,GAAI,OAAMD,IAAK,EAA7B;AACA,QAAME,WAAW,GAAI,MAAKF,IAAI,CAACG,MAAL,CAAY,CAAZ,EAAeC,WAAf,KAA+BJ,IAAI,CAACK,KAAL,CAAW,CAAX,CAAc,EAAvE;AACA,QAAMC,kBAAkB,GAAGP,CAAC,CAACQ,EAAF,CAAKL,WAAL,CAA3B;AAEA,QAAMM,OAAO,GAAG,EAAhB;AAEA;;;;;;AAKA,QAAMV,IAAN,SAAmBF,eAAnB,CAAmC;AACjCa,IAAAA,WAAW,CAACC,QAAD,EAAWC,MAAX,EAAmB;AAC5B,YACED,QADF,EAEEX,CAAC,CAACa,MAAF,CACE,IADF,EAEE;AACAJ,MAAAA,OAHF,EAIEG,MAJF,CAFF;AASD;;AAEDE,IAAAA,OAAO,CAACC,OAAO,GAAGb,QAAX,EAAqB;AAC1B,YAAMY,OAAN,CAAcC,OAAd;AACD;;AAED,WAAOC,OAAP,CAAeL,QAAf,EAAyB;AACvB,UAAIA,QAAQ,CAACM,IAAT,CAAc,MAAd,MAA0B,MAA9B,EAAsC;AACpC,eAAO,IAAP;AACD;;AACD,aAAO,KAAP;AACD;;AAED,WAAOC,WAAP,CAAmBC,SAAnB,EAA8BR,QAA9B,EAAwC;AACtCb,MAAAA,IAAI,CAACsB,MAAL,CACE,KAAKT,QADP,EAEE,KAAKK,OAAL,CAAaL,QAAb,CAFF,EAGG,GAAEQ,SAAU,sBAAqBrB,IAAI,CAACuB,QAAL,CAChCV,QADgC,CAEhC,8BALJ;AAOD,KAhCgC,CAkCjC;AACA;AAEA;AACA;AAEA;AACA;;;AACA,WAAOW,gBAAP,CAAwBV,MAAxB,EAAgC;AAC9B,aAAO,KAAKW,IAAL,CAAU,YAAW;AAC1B,YAAIZ,QAAQ,GAAGX,CAAC,CAAC,IAAD,CAAhB;AACA,YAAIwB,IAAI,GAAGb,QAAQ,CAACa,IAAT,CAActB,QAAd,CAAX;;AAEA,YAAI,CAACsB,IAAL,EAAW;AACTA,UAAAA,IAAI,GAAG,IAAIzB,IAAJ,CAASY,QAAT,EAAmBC,MAAnB,CAAP;AACAD,UAAAA,QAAQ,CAACa,IAAT,CAActB,QAAd,EAAwBsB,IAAxB;AACD;AACF,OARM,CAAP;AASD;;AApDgC;AAuDnC;;;;;;;AAKAxB,EAAAA,CAAC,CAACQ,EAAF,CAAKL,WAAL,IAAoBJ,IAAI,CAACuB,gBAAzB;AACAtB,EAAAA,CAAC,CAACQ,EAAF,CAAKL,WAAL,EAAkBsB,WAAlB,GAAgC1B,IAAhC;;AACAC,EAAAA,CAAC,CAACQ,EAAF,CAAKL,WAAL,EAAkBuB,UAAlB,GAA+B,MAAM;AACnC1B,IAAAA,CAAC,CAACQ,EAAF,CAAKL,WAAL,IAAoBI,kBAApB;AACA,WAAOR,IAAI,CAACuB,gBAAZ;AACD,GAHD;;AAKA,SAAOvB,IAAP;AACD,CAtFY,EAsFV4B,MAtFU,CAAb;;AAwFA,eAAe5B,IAAf","sourcesContent":["import BaseFormControl from \"./baseFormControl\";\n//import Checkbox from './checkbox'\n//import File from './file'\n//import Radio from './radio'\n//import Switch from './switch'\n//import Textarea from './textarea'\n//import Select from './select'\nimport Util from \"./util\";\n\nconst Text = ($ => {\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n  const NAME = \"text\";\n  const DATA_KEY = `bmd.${NAME}`;\n  const JQUERY_NAME = `bmd${NAME.charAt(0).toUpperCase() + NAME.slice(1)}`;\n  const JQUERY_NO_CONFLICT = $.fn[JQUERY_NAME];\n\n  const Default = {};\n\n  /**\n   * ------------------------------------------------------------------------\n   * Class Definition\n   * ------------------------------------------------------------------------\n   */\n  class Text extends BaseFormControl {\n    constructor($element, config) {\n      super(\n        $element,\n        $.extend(\n          true,\n          //{invalidComponentMatches: [Checkbox, File, Radio, Switch, Select, Textarea]},\n          Default,\n          config\n        )\n      );\n    }\n\n    dispose(dataKey = DATA_KEY) {\n      super.dispose(dataKey);\n    }\n\n    static matches($element) {\n      if ($element.attr(\"type\") === \"text\") {\n        return true;\n      }\n      return false;\n    }\n\n    static rejectMatch(component, $element) {\n      Util.assert(\n        this.$element,\n        this.matches($element),\n        `${component} component element ${Util.describe(\n          $element\n        )} is invalid for type='text'.`\n      );\n    }\n\n    // ------------------------------------------------------------------------\n    // protected\n\n    // ------------------------------------------------------------------------\n    // private\n\n    // ------------------------------------------------------------------------\n    // static\n    static _jQueryInterface(config) {\n      return this.each(function() {\n        let $element = $(this);\n        let data = $element.data(DATA_KEY);\n\n        if (!data) {\n          data = new Text($element, config);\n          $element.data(DATA_KEY, data);\n        }\n      });\n    }\n  }\n\n  /**\n   * ------------------------------------------------------------------------\n   * jQuery\n   * ------------------------------------------------------------------------\n   */\n  $.fn[JQUERY_NAME] = Text._jQueryInterface;\n  $.fn[JQUERY_NAME].Constructor = Text;\n  $.fn[JQUERY_NAME].noConflict = () => {\n    $.fn[JQUERY_NAME] = JQUERY_NO_CONFLICT;\n    return Text._jQueryInterface;\n  };\n\n  return Text;\n})(jQuery);\n\nexport default Text;\n"]},"metadata":{},"sourceType":"module"}