{"ast":null,"code":"import Util from \"./util\";\n\nconst Base = ($ => {\n  const ClassName = {\n    BMD_FORM_GROUP: \"bmd-form-group\",\n    IS_FILLED: \"is-filled\",\n    IS_FOCUSED: \"is-focused\"\n  };\n  const Selector = {\n    BMD_FORM_GROUP: `.${ClassName.BMD_FORM_GROUP}`\n  };\n  const Default = {};\n  /**\n   * ------------------------------------------------------------------------\n   * Class Definition\n   * ------------------------------------------------------------------------\n   */\n\n  class Base {\n    /**\n     *\n     * @param element\n     * @param config\n     * @param properties - anything that needs to be set as this[key] = value.  Works around the need to call `super` before using `this`\n     */\n    constructor($element, config, properties = {}) {\n      this.$element = $element;\n      this.config = $.extend(true, {}, Default, config); // set properties for use in the constructor initialization\n\n      for (let key in properties) {\n        this[key] = properties[key];\n      }\n    }\n\n    dispose(dataKey) {\n      this.$element.data(dataKey, null);\n      this.$element = null;\n      this.config = null;\n    } // ------------------------------------------------------------------------\n    // protected\n\n\n    addFormGroupFocus() {\n      if (!this.$element.prop(\"disabled\")) {\n        this.$bmdFormGroup.addClass(ClassName.IS_FOCUSED);\n      }\n    }\n\n    removeFormGroupFocus() {\n      this.$bmdFormGroup.removeClass(ClassName.IS_FOCUSED);\n    }\n\n    removeIsFilled() {\n      this.$bmdFormGroup.removeClass(ClassName.IS_FILLED);\n    }\n\n    addIsFilled() {\n      this.$bmdFormGroup.addClass(ClassName.IS_FILLED);\n    } // Find bmd-form-group\n\n\n    findMdbFormGroup(raiseError = true) {\n      let mfg = this.$element.closest(Selector.BMD_FORM_GROUP);\n\n      if (mfg.length === 0 && raiseError) {\n        $.error(`Failed to find ${Selector.BMD_FORM_GROUP} for ${Util.describe(this.$element)}`);\n      }\n\n      return mfg;\n    } // ------------------------------------------------------------------------\n    // private\n    // ------------------------------------------------------------------------\n    // static\n\n\n  }\n\n  return Base;\n})(jQuery);\n\nexport default Base;","map":{"version":3,"sources":["/Users/aaron/Desktop/my-app/node_modules/bootstrap-material-design/js/base.js"],"names":["Util","Base","$","ClassName","BMD_FORM_GROUP","IS_FILLED","IS_FOCUSED","Selector","Default","constructor","$element","config","properties","extend","key","dispose","dataKey","data","addFormGroupFocus","prop","$bmdFormGroup","addClass","removeFormGroupFocus","removeClass","removeIsFilled","addIsFilled","findMdbFormGroup","raiseError","mfg","closest","length","error","describe","jQuery"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,QAAjB;;AAEA,MAAMC,IAAI,GAAG,CAACC,CAAC,IAAI;AACjB,QAAMC,SAAS,GAAG;AAChBC,IAAAA,cAAc,EAAE,gBADA;AAEhBC,IAAAA,SAAS,EAAE,WAFK;AAGhBC,IAAAA,UAAU,EAAE;AAHI,GAAlB;AAMA,QAAMC,QAAQ,GAAG;AACfH,IAAAA,cAAc,EAAG,IAAGD,SAAS,CAACC,cAAe;AAD9B,GAAjB;AAIA,QAAMI,OAAO,GAAG,EAAhB;AAEA;;;;;;AAKA,QAAMP,IAAN,CAAW;AACT;;;;;;AAMAQ,IAAAA,WAAW,CAACC,QAAD,EAAWC,MAAX,EAAmBC,UAAU,GAAG,EAAhC,EAAoC;AAC7C,WAAKF,QAAL,GAAgBA,QAAhB;AACA,WAAKC,MAAL,GAAcT,CAAC,CAACW,MAAF,CAAS,IAAT,EAAe,EAAf,EAAmBL,OAAnB,EAA4BG,MAA5B,CAAd,CAF6C,CAI7C;;AACA,WAAK,IAAIG,GAAT,IAAgBF,UAAhB,EAA4B;AAC1B,aAAKE,GAAL,IAAYF,UAAU,CAACE,GAAD,CAAtB;AACD;AACF;;AAEDC,IAAAA,OAAO,CAACC,OAAD,EAAU;AACf,WAAKN,QAAL,CAAcO,IAAd,CAAmBD,OAAnB,EAA4B,IAA5B;AACA,WAAKN,QAAL,GAAgB,IAAhB;AACA,WAAKC,MAAL,GAAc,IAAd;AACD,KArBQ,CAuBT;AACA;;;AAEAO,IAAAA,iBAAiB,GAAG;AAClB,UAAI,CAAC,KAAKR,QAAL,CAAcS,IAAd,CAAmB,UAAnB,CAAL,EAAqC;AACnC,aAAKC,aAAL,CAAmBC,QAAnB,CAA4BlB,SAAS,CAACG,UAAtC;AACD;AACF;;AAEDgB,IAAAA,oBAAoB,GAAG;AACrB,WAAKF,aAAL,CAAmBG,WAAnB,CAA+BpB,SAAS,CAACG,UAAzC;AACD;;AAEDkB,IAAAA,cAAc,GAAG;AACf,WAAKJ,aAAL,CAAmBG,WAAnB,CAA+BpB,SAAS,CAACE,SAAzC;AACD;;AAEDoB,IAAAA,WAAW,GAAG;AACZ,WAAKL,aAAL,CAAmBC,QAAnB,CAA4BlB,SAAS,CAACE,SAAtC;AACD,KA1CQ,CA4CT;;;AACAqB,IAAAA,gBAAgB,CAACC,UAAU,GAAG,IAAd,EAAoB;AAClC,UAAIC,GAAG,GAAG,KAAKlB,QAAL,CAAcmB,OAAd,CAAsBtB,QAAQ,CAACH,cAA/B,CAAV;;AACA,UAAIwB,GAAG,CAACE,MAAJ,KAAe,CAAf,IAAoBH,UAAxB,EAAoC;AAClCzB,QAAAA,CAAC,CAAC6B,KAAF,CACG,kBAAiBxB,QAAQ,CAACH,cAAe,QAAOJ,IAAI,CAACgC,QAAL,CAC/C,KAAKtB,QAD0C,CAE/C,EAHJ;AAKD;;AACD,aAAOkB,GAAP;AACD,KAvDQ,CAyDT;AACA;AAEA;AACA;;;AA7DS;;AAgEX,SAAO3B,IAAP;AACD,CAnFY,EAmFVgC,MAnFU,CAAb;;AAqFA,eAAehC,IAAf","sourcesContent":["import Util from \"./util\";\n\nconst Base = ($ => {\n  const ClassName = {\n    BMD_FORM_GROUP: \"bmd-form-group\",\n    IS_FILLED: \"is-filled\",\n    IS_FOCUSED: \"is-focused\"\n  };\n\n  const Selector = {\n    BMD_FORM_GROUP: `.${ClassName.BMD_FORM_GROUP}`\n  };\n\n  const Default = {};\n\n  /**\n   * ------------------------------------------------------------------------\n   * Class Definition\n   * ------------------------------------------------------------------------\n   */\n  class Base {\n    /**\n     *\n     * @param element\n     * @param config\n     * @param properties - anything that needs to be set as this[key] = value.  Works around the need to call `super` before using `this`\n     */\n    constructor($element, config, properties = {}) {\n      this.$element = $element;\n      this.config = $.extend(true, {}, Default, config);\n\n      // set properties for use in the constructor initialization\n      for (let key in properties) {\n        this[key] = properties[key];\n      }\n    }\n\n    dispose(dataKey) {\n      this.$element.data(dataKey, null);\n      this.$element = null;\n      this.config = null;\n    }\n\n    // ------------------------------------------------------------------------\n    // protected\n\n    addFormGroupFocus() {\n      if (!this.$element.prop(\"disabled\")) {\n        this.$bmdFormGroup.addClass(ClassName.IS_FOCUSED);\n      }\n    }\n\n    removeFormGroupFocus() {\n      this.$bmdFormGroup.removeClass(ClassName.IS_FOCUSED);\n    }\n\n    removeIsFilled() {\n      this.$bmdFormGroup.removeClass(ClassName.IS_FILLED);\n    }\n\n    addIsFilled() {\n      this.$bmdFormGroup.addClass(ClassName.IS_FILLED);\n    }\n\n    // Find bmd-form-group\n    findMdbFormGroup(raiseError = true) {\n      let mfg = this.$element.closest(Selector.BMD_FORM_GROUP);\n      if (mfg.length === 0 && raiseError) {\n        $.error(\n          `Failed to find ${Selector.BMD_FORM_GROUP} for ${Util.describe(\n            this.$element\n          )}`\n        );\n      }\n      return mfg;\n    }\n\n    // ------------------------------------------------------------------------\n    // private\n\n    // ------------------------------------------------------------------------\n    // static\n  }\n\n  return Base;\n})(jQuery);\n\nexport default Base;\n"]},"metadata":{},"sourceType":"module"}